name: Master-Build-Docker-Images

#on:
#  push:
#    # 每次 push tag 时进行构建，不需要每次 push 都构建。使用通配符匹配每次 tag 的提交，记得 tag 名一定要以 v 开头
#    tags:
#      - v*

on:
  push:
    branches:
      - Nacos

jobs:
  push:
    # 如果需要在构建前进行测试的话需要取消下面的注释和上面对应的 test 动作的注释。
    # needs: test

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: docker/setup-buildx-action@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 12.x
      # 安装maven依赖
      - name: Maven Clean Install
        run: |
          echo '=====开始mvn clean====='
          mvn clean

          echo '=====开始mvn install&&package====='
          mvn install -DskipTests=true && mvn package -DskipTests=true

      - name: Build vue_admin and vue_web
        run: |
          echo '=====开始安装Vue_admin依赖====='
          cd ./vue_admin
          npm install
          npm run build
          cd ..

          echo '=====开始安装Vue_web依赖====='
          cd ./vue_web
          npm install
          npm run build
          cd ..

        # 构建镜像，指定镜像名
      - name: Build Java Docker Images
        run: |

          echo '=====开始构建镜像====='
          echo '=====开始构建admin====='
          cd admin
          mvn docker:build
          cd ..

          echo '=====开始构建gateway====='
          cd gateway
          mvn docker:build
          cd ..

          echo '=====开始构建monitor====='
          cd monitor
          mvn docker:build
          cd ..

          echo '=====开始构建picture====='
          cd picture
          mvn docker:build
          cd ..

          echo '=====开始构建search====='
          cd search
          mvn docker:build
          cd ..

          echo '=====开始构建sms====='
          cd sms
          mvn docker:build
          cd ..

          echo '=====开始构建spider====='
          cd spider
          mvn docker:build
          cd ..

          echo '=====开始构建web====='
          cd web
          mvn docker:build
          cd ..

          echo '=====镜像构建结束====='

      # 构建镜像，指定镜像名
      - name: Build Vue Docker Images
        run: |

          echo '=====开始构建镜像====='
          echo '=====开始构建vue_admin====='
          cd vue_admin
          docker build -t registry.cn-shenzhen.aliyuncs.com/blog/vue_admin .
          cd ..

          cd vue_web
          docker build -t registry.cn-shenzhen.aliyuncs.com/blog/vue_web .
          cd ..

          echo '=====镜像构建结束====='

      # 登录到 阿里云镜像服务，使用 GitHub secrets 传入账号密码，密码被加密存储在 GitHub 服务器
      - name: Login to Aliyun
        uses: docker/login-action@v1
        with:
          registry: registry.cn-shenzhen.aliyuncs.com
          username: ${{ secrets.ALIYUN_USER_NAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Push Docker Image
        run: |
          echo '=====开始上传镜像====='
          echo '=====开始上传admin====='
          docker push registry.cn-shenzhen.aliyuncs.com/blog/admin

          echo '=====开始上传gateway====='
          docker push registry.cn-shenzhen.aliyuncs.com/blog/gateway

          echo '=====开始上传monitor====='
          docker push registry.cn-shenzhen.aliyuncs.com/blog/monitor

          echo '=====开始上传picture====='
          docker push registry.cn-shenzhen.aliyuncs.com/blog/picture

          echo '=====开始上传search====='
          docker push registry.cn-shenzhen.aliyuncs.com/blog/search

          echo '=====开始上传sms====='
          docker push registry.cn-shenzhen.aliyuncs.com/blog/sms

          echo '=====开始上传spider====='
          docker push registry.cn-shenzhen.aliyuncs.com/blog/spider

          echo '=====开始上传web====='
          docker push registry.cn-shenzhen.aliyuncs.com/blog/web

          echo '=====开始上传vue_admin====='
          docker push registry.cn-shenzhen.aliyuncs.com/blog/vue_admin

          echo '=====开始上传vue_web====='
          docker push registry.cn-shenzhen.aliyuncs.com/blog/vue_web

          echo '=====镜像上传结束====='

#      - name: Update New Docker Image And Restart Server
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.DOCKER_IP_DEV_NACOS }}
#          username: ${{ secrets.DOCKER_ID }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#          port: 22
#          script: |
#            cd /root/docker-compose/bin
#            ./update.sh
